srcs/pipes.c.orig:  pid_t       pid[semicol->nb_pipes + 1];
srcs/pipes.c.orig:  int         pipes[semicol->nb_pipes * 2 + 1];
srcs/pipes.c.orig:  init_pipes(semicol->nb_pipes * 2, pipes);
srcs/pipes.c.orig:  first_pipes = semicol->pipes;
srcs/pipes.c.orig:  while (++j < semicol->nb_pipes)
srcs/pipes.c.orig:      do_dup(j, semicol->nb_pipes, pipes, semicol->pipes);
srcs/pipes.c.orig:      close_pipes(semicol->nb_pipes * 2, pipes);
srcs/pipes.c.orig:      if ((*ret = find_fcts(&semicol->pipes->cmds, env)) != -1)
srcs/pipes.c.orig:      else if ((*ret = execvp(*semicol->all[j], semicol->all[j])))
srcs/pipes.c.orig:    semicol->pipes = semicol->pipes->next;
srcs/pipes.c.orig:  semicol->pipes = first_pipes;
srcs/pipes.c.orig:  close_pipes(semicol->nb_pipes * 2, pipes);
srcs/pipes.c.orig:  wait_pipes(semicol->nb_pipes * 2, pid, ret);
srcs/pipes.c.orig:    semicol = semicol->next;
srcs/lists/lists_semicol.c:	semicol->str = str;
srcs/lists/lists_semicol.c:	semicol->pipes = split_pipes(semicol->str, env);
srcs/lists/lists_semicol.c:	semicol->next = NULL;
srcs/lists/lists_semicol.c:	while (semicol->next)
srcs/lists/lists_semicol.c:		semicol = semicol->next;
srcs/lists/lists_utils.c:		first_pipes = semicol->pipes;
srcs/lists/lists_utils.c:		while (semicol->pipes != NULL)
srcs/lists/lists_utils.c:			count_args(&semicol->pipes->cmds);
srcs/lists/lists_utils.c:			semicol->pipes = semicol->pipes->next;
srcs/lists/lists_utils.c:		semicol->pipes = first_pipes;
srcs/lists/lists_utils.c:		semicol->nb_pipes = i;
srcs/lists/lists_utils.c:		semicol = semicol->next;
srcs/lists/lists_utils.c:		first_pipe = semicol->pipes;
srcs/lists/lists_utils.c:		while (semicol->pipes)
srcs/lists/lists_utils.c:			new_str_utils(semicol->pipes);
srcs/lists/lists_utils.c:			semicol->pipes = semicol->pipes->next;
srcs/lists/lists_utils.c:		semicol->pipes = first_pipe;
srcs/lists/lists_utils.c:		semicol = semicol->next;
srcs/lists/lists_utils.c:		if (!(semicol->all = ft_calloc(sizeof(char **), semicol->nb_pipes + 1)))
srcs/lists/lists_utils.c:		first_pipe = semicol->pipes;
srcs/lists/lists_utils.c:		while (semicol->pipes != NULL)
srcs/lists/lists_utils.c:			semicol->all[i++] = new_tab(semicol->pipes);
srcs/lists/lists_utils.c:			semicol->pipes = semicol->pipes->next;
srcs/lists/lists_utils.c:		semicol->pipes = first_pipe;
srcs/lists/lists_utils.c:		semicol = semicol->next;
srcs/pipes.c:	redir_in = &semicol->pipes->redir_in;
srcs/pipes.c:	redir_out = &semicol->pipes->redir_out;
srcs/pipes.c:	if (semicol->nb_pipes == 1 && semicol->pipes->redir_in.simpl == NULL &&
srcs/pipes.c:			semicol->pipes->redir_in.doubl == NULL
srcs/pipes.c:			&& semicol->pipes->redir_out.simpl == NULL &&
srcs/pipes.c:			semicol->pipes->redir_out.doubl == NULL && search_mybin(str))
srcs/pipes.c:	do_dup(j, semicol->nb_pipes, pipes, semicol->pipes);
srcs/pipes.c:	close_pipes(semicol->nb_pipes * 2, pipes);
srcs/pipes.c:	if ((semicol->ret= find_fcts(&semicol->pipes->cmds, env)) != -1)
srcs/pipes.c:		exit(semicol->ret);
srcs/pipes.c:		if ((path = check_path(semicol->pipes->cmds.str, *env)) != NULL)
srcs/pipes.c:			if ((semicol->ret= execvp(path, semicol->all[j])))
srcs/pipes.c:				exit(semicol->ret);
srcs/pipes.c:			ft_printf(ERROR_FIND_CMD, semicol->pipes->cmds.str);
srcs/pipes.c:	int			pipes[semicol->nb_pipes * 2 + 1];
srcs/pipes.c:	pid_t		pid[semicol->nb_pipes + 1];
srcs/pipes.c:	init_pipes(semicol->nb_pipes * 2, pipes);
srcs/pipes.c:	first_pipes = semicol->pipes;
srcs/pipes.c:	while (++j < semicol->nb_pipes)
srcs/pipes.c:		if (condition_do_pipe(semicol, semicol->pipes->cmds.str))
srcs/pipes.c:			find_fcts(&semicol->pipes->cmds, env);
srcs/pipes.c:		semicol->pipes = semicol->pipes->next;
srcs/pipes.c:	semicol->pipes = first_pipes;
srcs/pipes.c:	close_pipes(semicol->nb_pipes * 2, pipes);
srcs/pipes.c:	wait_pipes(semicol->nb_pipes * 2, pid, ret);
srcs/pipes.c:		semicol = semicol->next;
srcs/ft_free.c:		free(semicol->str);
srcs/ft_free.c:		free_tab_all(semicol->all);
srcs/ft_free.c:		free_pipes(semicol->pipes);
srcs/ft_free.c:		semicol = semicol->next;
